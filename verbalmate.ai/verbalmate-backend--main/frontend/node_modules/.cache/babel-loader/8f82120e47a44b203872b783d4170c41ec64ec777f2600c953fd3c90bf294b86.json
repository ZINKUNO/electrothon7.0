{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Arpit\\\\OneDrive\\\\Desktop\\\\new verbalmate ai\\\\verbalmate.ai\\\\verbalmate-backend--main\\\\frontend\\\\src\\\\pages\\\\InterviewPage.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport interviewStyles from \"../styles/interviewPage.module.css\";\nimport interviewer from \"../assets/interviewer.png\";\nimport interviewee from \"../assets/interviewee.png\";\nimport axios from \"axios\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport { useNavigate } from \"react-router-dom\";\nimport { LOCAL_URL } from \"../api\";\nimport Loader from \"../components/ui/Loader\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function InterviewPage() {\n  _s();\n  const navigate = useNavigate();\n  const [aiResponse, setAiResponse] = useState(\"\");\n  const [isInterviewerSpeaking, setIsInterviewerSpeaking] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [glowingEffect, setGlowingEffect] = useState({\n    user: false,\n    interviewer: false\n  });\n  const isRun = useRef(false);\n  const speechSynthesisRef = useRef(null);\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n\n  // Cleanup function for speech synthesis\n  useEffect(() => {\n    return () => {\n      if (speechSynthesisRef.current) {\n        speechSynthesis.cancel();\n      }\n    };\n  }, []);\n\n  // starting loading before interview starts\n  useEffect(() => {\n    setTimeout(() => {\n      setLoading(false);\n    }, 3000);\n  }, []);\n\n  // send empty script on initial load so that ai starts responding\n  useEffect(() => {\n    const firstRequestToGemini = async () => {\n      try {\n        const response = await axios.post(`${LOCAL_URL}/api/chat`, {\n          transcript: \"\"\n        });\n        setAiResponse(response.data.content);\n        speak(response.data.content);\n      } catch (error) {\n        console.error(\"Error in first request:\", error);\n        setIsInterviewerSpeaking(false);\n      }\n    };\n    if (isRun.current === true) return;\n    isRun.current = true;\n    setTimeout(() => {\n      firstRequestToGemini();\n    }, 2000);\n  }, []);\n  useEffect(() => {\n    const interviewComplete = \"Thank you for talking with VerbalMate AI\";\n    if (aiResponse !== null && aiResponse !== void 0 && aiResponse.includes(interviewComplete) && isInterviewerSpeaking === false) {\n      navigate(\"/feedback\");\n    }\n  }, [aiResponse, isInterviewerSpeaking, navigate]);\n  if (!browserSupportsSpeechRecognition) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Browser doesn't support speech recognition. This project best works on microsoft edge.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 12\n    }, this);\n  }\n  const handleStartListeningUser = () => {\n    setGlowingEffect(prev => ({\n      ...prev,\n      user: true\n    }));\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: \"en-IN\",\n      interimResults: true\n    });\n  };\n  const handleStopListeningUser = async () => {\n    setGlowingEffect(prev => ({\n      ...prev,\n      user: false\n    }));\n    SpeechRecognition.stopListening();\n    try {\n      const response = await axios.post(`${LOCAL_URL}/api/chat`, {\n        transcript\n      });\n      setAiResponse(response.data.content);\n      speak(response.data.content);\n      resetTranscript();\n    } catch (error) {\n      console.error(\"Error in chat request:\", error);\n      setIsInterviewerSpeaking(false);\n    }\n  };\n  function speak(text) {\n    // Cancel any ongoing speech\n    speechSynthesis.cancel();\n    setGlowingEffect(prev => ({\n      ...prev,\n      interviewer: true\n    }));\n    setIsInterviewerSpeaking(true);\n    const utterance = new SpeechSynthesisUtterance(text);\n    const voices = speechSynthesis.getVoices();\n    utterance.voice = voices[0];\n    utterance.lang = \"en-IN\";\n\n    // Handle both successful completion and errors\n    utterance.onend = () => {\n      setIsInterviewerSpeaking(false);\n      setGlowingEffect(prev => ({\n        ...prev,\n        interviewer: false\n      }));\n      speechSynthesisRef.current = null;\n    };\n    utterance.onerror = event => {\n      console.error(\"Speech synthesis error:\", event);\n      setIsInterviewerSpeaking(false);\n      setGlowingEffect(prev => ({\n        ...prev,\n        interviewer: false\n      }));\n      speechSynthesisRef.current = null;\n    };\n\n    // Store the utterance reference\n    speechSynthesisRef.current = utterance;\n    try {\n      speechSynthesis.speak(utterance);\n    } catch (error) {\n      console.error(\"Speech synthesis error:\", error);\n      setIsInterviewerSpeaking(false);\n      setGlowingEffect(prev => ({\n        ...prev,\n        interviewer: false\n      }));\n      speechSynthesisRef.current = null;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(Loader, {\n      text: \"VerbalMate is generating your conversation. Almost there....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: interviewStyles.interviewLayout,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: interviewStyles.interviewLHS,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${interviewStyles.sectionBackground} ${interviewStyles.interviewerSection}`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: interviewStyles.sectionTitle,\n            children: \"Interviewer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: interviewer,\n            alt: \"AI Interviewer\",\n            className: `${interviewStyles.interviewerProfile} ${glowingEffect.interviewer ? interviewStyles.glowingEffect : \"\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${interviewStyles.sectionBackground} ${interviewStyles.intervieweeSection}`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: interviewStyles.sectionTitle,\n            children: \"You\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: interviewee,\n            alt: \"AI Interviewee\",\n            className: `${interviewStyles.intervieweeProfile} ${glowingEffect.user ? interviewStyles.glowingEffect : \"\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: interviewStyles.intervieweeControlButtonGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleStartListeningUser,\n              className: `${interviewStyles.intervieweeControlButton} ${isInterviewerSpeaking || listening ? interviewStyles.intervieweeControlButtonInactive : \"\"}`,\n              disabled: isInterviewerSpeaking || listening,\n              children: \"Start answering\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleStopListeningUser,\n              className: `${interviewStyles.intervieweeControlButton} ${isInterviewerSpeaking || !listening ? interviewStyles.intervieweeControlButtonInactive : \"\"}`,\n              disabled: isInterviewerSpeaking || !listening,\n              children: \"Stop answering\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: interviewStyles.interviewRHS,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${interviewStyles.sectionBackground} ${interviewStyles.qASection}`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: interviewStyles.sectionTitle,\n            children: \"Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: interviewStyles.sectionContent,\n            children: [aiResponse, \"Please watch the video demo to view this feature in action as we have exhausted our api key.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${interviewStyles.sectionBackground} ${interviewStyles.qASection} ${interviewStyles.answerSection}`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: interviewStyles.sectionTitle,\n            children: \"Answer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: interviewStyles.sectionContent,\n            children: transcript\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(InterviewPage, \"vJBJtAwGZCSPIG/E8RB19CqLFoU=\", false, function () {\n  return [useNavigate, useSpeechRecognition];\n});\n_c = InterviewPage;\nvar _c;\n$RefreshReg$(_c, \"InterviewPage\");","map":{"version":3,"names":["useEffect","useRef","useState","interviewStyles","interviewer","interviewee","axios","SpeechRecognition","useSpeechRecognition","useNavigate","LOCAL_URL","Loader","jsxDEV","_jsxDEV","Fragment","_Fragment","InterviewPage","_s","navigate","aiResponse","setAiResponse","isInterviewerSpeaking","setIsInterviewerSpeaking","loading","setLoading","glowingEffect","setGlowingEffect","user","isRun","speechSynthesisRef","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","current","speechSynthesis","cancel","setTimeout","firstRequestToGemini","response","post","data","content","speak","error","console","interviewComplete","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","handleStartListeningUser","prev","startListening","continuous","language","interimResults","handleStopListeningUser","stopListening","text","utterance","SpeechSynthesisUtterance","voices","getVoices","voice","lang","onend","onerror","event","className","interviewLayout","interviewLHS","sectionBackground","interviewerSection","sectionTitle","src","alt","interviewerProfile","intervieweeSection","intervieweeProfile","intervieweeControlButtonGroup","onClick","intervieweeControlButton","intervieweeControlButtonInactive","disabled","interviewRHS","qASection","sectionContent","answerSection","_c","$RefreshReg$"],"sources":["C:/Users/Arpit/OneDrive/Desktop/new verbalmate ai/verbalmate.ai/verbalmate-backend--main/frontend/src/pages/InterviewPage.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport interviewStyles from \"../styles/interviewPage.module.css\";\r\nimport interviewer from \"../assets/interviewer.png\";\r\nimport interviewee from \"../assets/interviewee.png\";\r\nimport axios from \"axios\";\r\nimport SpeechRecognition, {\r\n  useSpeechRecognition,\r\n} from \"react-speech-recognition\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { LOCAL_URL } from \"../api\";\r\nimport Loader from \"../components/ui/Loader\";\r\n\r\nexport default function InterviewPage() {\r\n  const navigate = useNavigate();\r\n  const [aiResponse, setAiResponse] = useState(\"\");\r\n  const [isInterviewerSpeaking, setIsInterviewerSpeaking] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [glowingEffect, setGlowingEffect] = useState({\r\n    user: false,\r\n    interviewer: false,\r\n  });\r\n  const isRun = useRef(false);\r\n  const speechSynthesisRef = useRef(null);\r\n\r\n  const {\r\n    transcript,\r\n    listening,\r\n    resetTranscript,\r\n    browserSupportsSpeechRecognition,\r\n  } = useSpeechRecognition();\r\n\r\n  // Cleanup function for speech synthesis\r\n  useEffect(() => {\r\n    return () => {\r\n      if (speechSynthesisRef.current) {\r\n        speechSynthesis.cancel();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // starting loading before interview starts\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 3000);\r\n  }, []);\r\n\r\n  // send empty script on initial load so that ai starts responding\r\n  useEffect(() => {\r\n    const firstRequestToGemini = async () => {\r\n      try {\r\n        const response = await axios.post(`${LOCAL_URL}/api/chat`, {\r\n          transcript: \"\",\r\n        });\r\n        setAiResponse(response.data.content);\r\n        speak(response.data.content);\r\n      } catch (error) {\r\n        console.error(\"Error in first request:\", error);\r\n        setIsInterviewerSpeaking(false);\r\n      }\r\n    };\r\n\r\n    if (isRun.current === true) return;\r\n    isRun.current = true;\r\n\r\n    setTimeout(() => {\r\n      firstRequestToGemini();\r\n    }, 2000);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const interviewComplete = \"Thank you for talking with VerbalMate AI\";\r\n\r\n    if (\r\n      aiResponse?.includes(interviewComplete) &&\r\n      isInterviewerSpeaking === false\r\n    ) {\r\n      navigate(\"/feedback\");\r\n    }\r\n  }, [aiResponse, isInterviewerSpeaking, navigate]);\r\n\r\n  if (!browserSupportsSpeechRecognition) {\r\n    return <span>Browser doesn't support speech recognition. This project best works on microsoft edge.</span>;\r\n  }\r\n\r\n  const handleStartListeningUser = () => {\r\n    setGlowingEffect((prev) => ({ ...prev, user: true }));\r\n    SpeechRecognition.startListening({\r\n      continuous: true,\r\n      language: \"en-IN\",\r\n      interimResults: true,\r\n    });\r\n  };\r\n\r\n  const handleStopListeningUser = async () => {\r\n    setGlowingEffect((prev) => ({ ...prev, user: false }));\r\n    SpeechRecognition.stopListening();\r\n\r\n    try {\r\n      const response = await axios.post(`${LOCAL_URL}/api/chat`, {\r\n        transcript,\r\n      });\r\n      setAiResponse(response.data.content);\r\n      speak(response.data.content);\r\n      resetTranscript();\r\n    } catch (error) {\r\n      console.error(\"Error in chat request:\", error);\r\n      setIsInterviewerSpeaking(false);\r\n    }\r\n  };\r\n\r\n  function speak(text) {\r\n    // Cancel any ongoing speech\r\n    speechSynthesis.cancel();\r\n    \r\n    setGlowingEffect((prev) => ({ ...prev, interviewer: true }));\r\n    setIsInterviewerSpeaking(true);\r\n\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    const voices = speechSynthesis.getVoices();\r\n    utterance.voice = voices[0];\r\n    utterance.lang = \"en-IN\";\r\n\r\n    // Handle both successful completion and errors\r\n    utterance.onend = () => {\r\n      setIsInterviewerSpeaking(false);\r\n      setGlowingEffect((prev) => ({ ...prev, interviewer: false }));\r\n      speechSynthesisRef.current = null;\r\n    };\r\n\r\n    utterance.onerror = (event) => {\r\n      console.error(\"Speech synthesis error:\", event);\r\n      setIsInterviewerSpeaking(false);\r\n      setGlowingEffect((prev) => ({ ...prev, interviewer: false }));\r\n      speechSynthesisRef.current = null;\r\n    };\r\n\r\n    // Store the utterance reference\r\n    speechSynthesisRef.current = utterance;\r\n    \r\n    try {\r\n      speechSynthesis.speak(utterance);\r\n    } catch (error) {\r\n      console.error(\"Speech synthesis error:\", error);\r\n      setIsInterviewerSpeaking(false);\r\n      setGlowingEffect((prev) => ({ ...prev, interviewer: false }));\r\n      speechSynthesisRef.current = null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loader text=\"VerbalMate is generating your conversation. Almost there....\" />\r\n      ) : (\r\n        <div className={interviewStyles.interviewLayout}>\r\n          <div className={interviewStyles.interviewLHS}>\r\n            <div\r\n              className={`${interviewStyles.sectionBackground} ${interviewStyles.interviewerSection}`}\r\n            >\r\n              <p className={interviewStyles.sectionTitle}>Interviewer</p>\r\n              <img\r\n                src={interviewer}\r\n                alt=\"AI Interviewer\"\r\n                className={`${interviewStyles.interviewerProfile} ${\r\n                  glowingEffect.interviewer ? interviewStyles.glowingEffect : \"\"\r\n                }`}\r\n              />\r\n            </div>\r\n            <div\r\n              className={`${interviewStyles.sectionBackground} ${interviewStyles.intervieweeSection}`}\r\n            >\r\n              <p className={interviewStyles.sectionTitle}>You</p>\r\n              <img\r\n                src={interviewee}\r\n                alt=\"AI Interviewee\"\r\n                className={`${interviewStyles.intervieweeProfile} ${\r\n                  glowingEffect.user ? interviewStyles.glowingEffect : \"\"\r\n                }`}\r\n              />\r\n              <div className={interviewStyles.intervieweeControlButtonGroup}>\r\n                <button\r\n                  onClick={handleStartListeningUser}\r\n                  className={`${interviewStyles.intervieweeControlButton} ${\r\n                    isInterviewerSpeaking || listening\r\n                      ? interviewStyles.intervieweeControlButtonInactive\r\n                      : \"\"\r\n                  }`}\r\n                  disabled={isInterviewerSpeaking || listening}\r\n                >\r\n                  Start answering\r\n                </button>\r\n                <button\r\n                  onClick={handleStopListeningUser}\r\n                  className={`${interviewStyles.intervieweeControlButton} ${\r\n                    isInterviewerSpeaking || !listening\r\n                      ? interviewStyles.intervieweeControlButtonInactive\r\n                      : \"\"\r\n                  }`}\r\n                  disabled={isInterviewerSpeaking || !listening}\r\n                >\r\n                  Stop answering\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={interviewStyles.interviewRHS}>\r\n            <div\r\n              className={`${interviewStyles.sectionBackground} ${interviewStyles.qASection}`}\r\n            >\r\n              <p className={interviewStyles.sectionTitle}>Question</p>\r\n              <p className={interviewStyles.sectionContent}>{aiResponse}\r\n                Please watch the video demo to view this feature in action as we have exhausted our api key.\r\n              </p>\r\n            </div>\r\n            <div\r\n              className={`${interviewStyles.sectionBackground} ${interviewStyles.qASection} ${interviewStyles.answerSection}`}\r\n            >\r\n              <p className={interviewStyles.sectionTitle}>Answer</p>\r\n              <p className={interviewStyles.sectionContent}>{transcript}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAOC,eAAe,MAAM,oCAAoC;AAChE,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,iBAAiB,IACtBC,oBAAoB,QACf,0BAA0B;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,QAAQ;AAClC,OAAOC,MAAM,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7C,eAAe,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACtC,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACmB,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACzE,MAAM,CAACqB,OAAO,EAAEC,UAAU,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACuB,aAAa,EAAEC,gBAAgB,CAAC,GAAGxB,QAAQ,CAAC;IACjDyB,IAAI,EAAE,KAAK;IACXvB,WAAW,EAAE;EACf,CAAC,CAAC;EACF,MAAMwB,KAAK,GAAG3B,MAAM,CAAC,KAAK,CAAC;EAC3B,MAAM4B,kBAAkB,GAAG5B,MAAM,CAAC,IAAI,CAAC;EAEvC,MAAM;IACJ6B,UAAU;IACVC,SAAS;IACTC,eAAe;IACfC;EACF,CAAC,GAAGzB,oBAAoB,CAAC,CAAC;;EAE1B;EACAR,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAI6B,kBAAkB,CAACK,OAAO,EAAE;QAC9BC,eAAe,CAACC,MAAM,CAAC,CAAC;MAC1B;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACApC,SAAS,CAAC,MAAM;IACdqC,UAAU,CAAC,MAAM;MACfb,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAxB,SAAS,CAAC,MAAM;IACd,MAAMsC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMjC,KAAK,CAACkC,IAAI,CAAC,GAAG9B,SAAS,WAAW,EAAE;UACzDoB,UAAU,EAAE;QACd,CAAC,CAAC;QACFV,aAAa,CAACmB,QAAQ,CAACE,IAAI,CAACC,OAAO,CAAC;QACpCC,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACC,OAAO,CAAC;MAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/CtB,wBAAwB,CAAC,KAAK,CAAC;MACjC;IACF,CAAC;IAED,IAAIM,KAAK,CAACM,OAAO,KAAK,IAAI,EAAE;IAC5BN,KAAK,CAACM,OAAO,GAAG,IAAI;IAEpBG,UAAU,CAAC,MAAM;MACfC,oBAAoB,CAAC,CAAC;IACxB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAENtC,SAAS,CAAC,MAAM;IACd,MAAM8C,iBAAiB,GAAG,0CAA0C;IAEpE,IACE3B,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAE4B,QAAQ,CAACD,iBAAiB,CAAC,IACvCzB,qBAAqB,KAAK,KAAK,EAC/B;MACAH,QAAQ,CAAC,WAAW,CAAC;IACvB;EACF,CAAC,EAAE,CAACC,UAAU,EAAEE,qBAAqB,EAAEH,QAAQ,CAAC,CAAC;EAEjD,IAAI,CAACe,gCAAgC,EAAE;IACrC,oBAAOpB,OAAA;MAAAmC,QAAA,EAAM;IAAsF;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC5G;EAEA,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;IACrC3B,gBAAgB,CAAE4B,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE3B,IAAI,EAAE;IAAK,CAAC,CAAC,CAAC;IACrDpB,iBAAiB,CAACgD,cAAc,CAAC;MAC/BC,UAAU,EAAE,IAAI;MAChBC,QAAQ,EAAE,OAAO;MACjBC,cAAc,EAAE;IAClB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,uBAAuB,GAAG,MAAAA,CAAA,KAAY;IAC1CjC,gBAAgB,CAAE4B,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE3B,IAAI,EAAE;IAAM,CAAC,CAAC,CAAC;IACtDpB,iBAAiB,CAACqD,aAAa,CAAC,CAAC;IAEjC,IAAI;MACF,MAAMrB,QAAQ,GAAG,MAAMjC,KAAK,CAACkC,IAAI,CAAC,GAAG9B,SAAS,WAAW,EAAE;QACzDoB;MACF,CAAC,CAAC;MACFV,aAAa,CAACmB,QAAQ,CAACE,IAAI,CAACC,OAAO,CAAC;MACpCC,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACC,OAAO,CAAC;MAC5BV,eAAe,CAAC,CAAC;IACnB,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CtB,wBAAwB,CAAC,KAAK,CAAC;IACjC;EACF,CAAC;EAED,SAASqB,KAAKA,CAACkB,IAAI,EAAE;IACnB;IACA1B,eAAe,CAACC,MAAM,CAAC,CAAC;IAExBV,gBAAgB,CAAE4B,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAElD,WAAW,EAAE;IAAK,CAAC,CAAC,CAAC;IAC5DkB,wBAAwB,CAAC,IAAI,CAAC;IAE9B,MAAMwC,SAAS,GAAG,IAAIC,wBAAwB,CAACF,IAAI,CAAC;IACpD,MAAMG,MAAM,GAAG7B,eAAe,CAAC8B,SAAS,CAAC,CAAC;IAC1CH,SAAS,CAACI,KAAK,GAAGF,MAAM,CAAC,CAAC,CAAC;IAC3BF,SAAS,CAACK,IAAI,GAAG,OAAO;;IAExB;IACAL,SAAS,CAACM,KAAK,GAAG,MAAM;MACtB9C,wBAAwB,CAAC,KAAK,CAAC;MAC/BI,gBAAgB,CAAE4B,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAElD,WAAW,EAAE;MAAM,CAAC,CAAC,CAAC;MAC7DyB,kBAAkB,CAACK,OAAO,GAAG,IAAI;IACnC,CAAC;IAED4B,SAAS,CAACO,OAAO,GAAIC,KAAK,IAAK;MAC7BzB,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAE0B,KAAK,CAAC;MAC/ChD,wBAAwB,CAAC,KAAK,CAAC;MAC/BI,gBAAgB,CAAE4B,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAElD,WAAW,EAAE;MAAM,CAAC,CAAC,CAAC;MAC7DyB,kBAAkB,CAACK,OAAO,GAAG,IAAI;IACnC,CAAC;;IAED;IACAL,kBAAkB,CAACK,OAAO,GAAG4B,SAAS;IAEtC,IAAI;MACF3B,eAAe,CAACQ,KAAK,CAACmB,SAAS,CAAC;IAClC,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CtB,wBAAwB,CAAC,KAAK,CAAC;MAC/BI,gBAAgB,CAAE4B,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAElD,WAAW,EAAE;MAAM,CAAC,CAAC,CAAC;MAC7DyB,kBAAkB,CAACK,OAAO,GAAG,IAAI;IACnC;EACF;EAEA,oBACErB,OAAA,CAAAE,SAAA;IAAAiC,QAAA,EACGzB,OAAO,gBACNV,OAAA,CAACF,MAAM;MAACkD,IAAI,EAAC;IAA8D;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAE9EvC,OAAA;MAAK0D,SAAS,EAAEpE,eAAe,CAACqE,eAAgB;MAAAxB,QAAA,gBAC9CnC,OAAA;QAAK0D,SAAS,EAAEpE,eAAe,CAACsE,YAAa;QAAAzB,QAAA,gBAC3CnC,OAAA;UACE0D,SAAS,EAAE,GAAGpE,eAAe,CAACuE,iBAAiB,IAAIvE,eAAe,CAACwE,kBAAkB,EAAG;UAAA3B,QAAA,gBAExFnC,OAAA;YAAG0D,SAAS,EAAEpE,eAAe,CAACyE,YAAa;YAAA5B,QAAA,EAAC;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eAC3DvC,OAAA;YACEgE,GAAG,EAAEzE,WAAY;YACjB0E,GAAG,EAAC,gBAAgB;YACpBP,SAAS,EAAE,GAAGpE,eAAe,CAAC4E,kBAAkB,IAC9CtD,aAAa,CAACrB,WAAW,GAAGD,eAAe,CAACsB,aAAa,GAAG,EAAE;UAC7D;YAAAwB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACNvC,OAAA;UACE0D,SAAS,EAAE,GAAGpE,eAAe,CAACuE,iBAAiB,IAAIvE,eAAe,CAAC6E,kBAAkB,EAAG;UAAAhC,QAAA,gBAExFnC,OAAA;YAAG0D,SAAS,EAAEpE,eAAe,CAACyE,YAAa;YAAA5B,QAAA,EAAC;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACnDvC,OAAA;YACEgE,GAAG,EAAExE,WAAY;YACjByE,GAAG,EAAC,gBAAgB;YACpBP,SAAS,EAAE,GAAGpE,eAAe,CAAC8E,kBAAkB,IAC9CxD,aAAa,CAACE,IAAI,GAAGxB,eAAe,CAACsB,aAAa,GAAG,EAAE;UACtD;YAAAwB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eACFvC,OAAA;YAAK0D,SAAS,EAAEpE,eAAe,CAAC+E,6BAA8B;YAAAlC,QAAA,gBAC5DnC,OAAA;cACEsE,OAAO,EAAE9B,wBAAyB;cAClCkB,SAAS,EAAE,GAAGpE,eAAe,CAACiF,wBAAwB,IACpD/D,qBAAqB,IAAIU,SAAS,GAC9B5B,eAAe,CAACkF,gCAAgC,GAChD,EAAE,EACL;cACHC,QAAQ,EAAEjE,qBAAqB,IAAIU,SAAU;cAAAiB,QAAA,EAC9C;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTvC,OAAA;cACEsE,OAAO,EAAExB,uBAAwB;cACjCY,SAAS,EAAE,GAAGpE,eAAe,CAACiF,wBAAwB,IACpD/D,qBAAqB,IAAI,CAACU,SAAS,GAC/B5B,eAAe,CAACkF,gCAAgC,GAChD,EAAE,EACL;cACHC,QAAQ,EAAEjE,qBAAqB,IAAI,CAACU,SAAU;cAAAiB,QAAA,EAC/C;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACNvC,OAAA;QAAK0D,SAAS,EAAEpE,eAAe,CAACoF,YAAa;QAAAvC,QAAA,gBAC3CnC,OAAA;UACE0D,SAAS,EAAE,GAAGpE,eAAe,CAACuE,iBAAiB,IAAIvE,eAAe,CAACqF,SAAS,EAAG;UAAAxC,QAAA,gBAE/EnC,OAAA;YAAG0D,SAAS,EAAEpE,eAAe,CAACyE,YAAa;YAAA5B,QAAA,EAAC;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACxDvC,OAAA;YAAG0D,SAAS,EAAEpE,eAAe,CAACsF,cAAe;YAAAzC,QAAA,GAAE7B,UAAU,EAAC,8FAE1D;UAAA;YAAA8B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eACNvC,OAAA;UACE0D,SAAS,EAAE,GAAGpE,eAAe,CAACuE,iBAAiB,IAAIvE,eAAe,CAACqF,SAAS,IAAIrF,eAAe,CAACuF,aAAa,EAAG;UAAA1C,QAAA,gBAEhHnC,OAAA;YAAG0D,SAAS,EAAEpE,eAAe,CAACyE,YAAa;YAAA5B,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACtDvC,OAAA;YAAG0D,SAAS,EAAEpE,eAAe,CAACsF,cAAe;YAAAzC,QAAA,EAAElB;UAAU;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EACN,gBACD,CAAC;AAEP;AAACnC,EAAA,CAtNuBD,aAAa;EAAA,QAClBP,WAAW,EAgBxBD,oBAAoB;AAAA;AAAAmF,EAAA,GAjBF3E,aAAa;AAAA,IAAA2E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}